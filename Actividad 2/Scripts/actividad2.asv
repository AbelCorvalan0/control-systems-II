clear all; 
close all; clc;

%% Import data table.
% Read table.
data= readtable('../Resources/Curvas_Medidas_Motor_2025_v.xlsx');
data;
% Convert table to array. Apply transpose.
dataT= table2array(data);

% Obtain time(t), capacitor voltage(Vcap) and current(I) array.
t  = dataT(:, 1);
wr = dataT(:, 2);
I  = dataT(:, 3);
V  = dataT(:, 4);
tl = dataT(:, 5);
disp('Lenght of tl vector')
length(t)
disp('Maximium value time.')
max(t)

t(2)-t(1)

subplot(4, 1, 1);
plot(t, tl, 'LineWidth', 1.5)
xlabel('Tiempo [seg]')
ylabel('Torque [Nm]')
title('Perturbaci√≥n (Torque) \T_{L}')
grid

%% Define system parameters.
%
Ra  = 2.258930051299405;
La  = 0.005026901184834716;
Km  = 0.2500481104997174;
Ki  = 0.25965987053759737;
Jm  = 0.0028472626983113334;
Bm  = 0.0014165170369840668;


%% Define State Space Model.

% State Matrix.
A= [-Ra/La -Km/La  0;
     Ki/Jm -Bm/Jm  0;
       0      1    0];

% Input matrix.
B= [1/La    0 ;
     0   -1/Jm;
     0      0 ];

% Output Matrix.
C= [0 0 1];

D= [0 0];

%% Initial conditions.
Xop      = [0 0 0]';
ia(1)    = 0;
wr(1)    = 0;
theta(1) = 0;

sys= ss(A, B, C, D)

%% Controllability verification.
% Controllability matrix calculation.
Co= ctrb(sys)
% It allows us if the system can be carried brought into a any state
% in a limited time.

% Range of controllability matrix.
%rank_Co= rank(Co);

if rank(Co) == size(A, 1)
    disp('Sistema controlable');
else
    error('Sistema no controlable');
end   

% Eigen values from A.
% eigenV= eig(A)  % display eigenvalues.
% We've two negative real part eigenvalues
% stable system.
% Besides we've third eigenvalue which is equal to zero (0).
% which makes the system marginally stable.

%% Expanded matrix.
% We need to expand system to add error integral as state variable.
% |  A  0  |   | x(t) |   | B |        | 0 | 
% |        | * |      | + |   | u(t) + |   | r(t)
% | -C  0  |   | e(t) |   | 0 |        | 1 | 

Aa= [A  zeros(3,1);
    -C  0]

Ba= [B(:,1); 0]


